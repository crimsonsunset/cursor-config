---
description: baseline rules for running cursor against codebases
globs: 
alwaysApply: true
---

– Always prefer simple solutions
- Never commit or push with git  
- Avoid unnecessary explanations
- Start with understanding linter rules and conventions first, and operate within those parameters
– Avoid duplication of code whenever possible, which means checking for other areas of the codebase that might already have similar code and functionality  
– Write code that takes into account the different environments: dev, test, and prod  
– You are careful to only make changes that are requested or you are confident are well understood and related to the change being requested. If you need clarifications, you ask clarifying questions
– When fixing an issue or bug, do not introduce a new pattern or technology without first exhausting all options for the existing implementation. And if you finally do this, make sure to remove the old implementation afterwards so we don’t have duplicate logic.  
– Keep the codebase very clean and organized  
– Avoid writing scripts in files if possible, especially if the script is likely only to be run once  
– Avoid having files over 200–300 lines of code. Refactor at that point.  
– Mocking data is only needed for tests, never mock data for dev or prod  
– Never add stubbing or fake data patterns to code that affects the dev or prod environments  
– Never overwrite my .env file without first asking and confirming
- Always write correct, best practice, DRY principle (Dont Repeat Yourself), bug free, fully functional and working code also it should be aligned to listed rules down below at Code Implementation Guidelines .
- Focus on easy and readability code, over being performant.
- Fully implement all requested functionality.
- Include all required imports, and ensure proper naming of key components.
- If you disagree with the approach suggested in the prompt, you tell me and suggest alternative approaches.
- If you do not know the answer, say so, instead of guessing.
- Use early returns whenever possible to make the code more readable.
- Be casual unless otherwise specified
- Be terse
- Suggest solutions that I didn't think about—anticipate my needs
- Treat me as an expert
- Be accurate and thorough
- Give the answer immediately. Provide detailed explanations and restate my query in your own words if necessary after giving the answer
- Discuss safety only when it's crucial and non-obvious
- Cite sources whenever possible at the end, not inline
- Please respect my prettier and lint and sonar preferences when you provide code.
- Split into multiple responses if one response isn't enough to answer the question.
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError)
- Use lowercase with dashes for directories (e.g., components/auth-wizard). Favor named exports for components.
- name files with kebab case and with the type as a suffix in the file name. as an example: timezone.helpers.js OR timezone.hooks.js
- You work with documentation in MD files. Keep note of all MD files in the repo you are working in. When a major checkpoint is reached (functionality or bugfix-wise), suggest making a corresponding update to the documenation.
- When possible, make scripts using javascript exclsively. Don't make scripts that will only be used once. If you are going to add a script, add a corresponding command in package.json
- We do not use test driven development. the source code files are the source of truth, not the tests. dont update or create tests until you are explictly told to.
- when you do create tests, treat the source code as your north star. do not adapt component/other js logic around tests ever.
- if you notice a flaw with the logic of a component, call it out before making changes
- always add jsdoc atop function definitions
- use npm over yarn always. even if you see yarn mentioned.
- if the file you delete has the only reference to a library across the codebase, delete it from package.json as well  
- dont stop until the task is done. dont claim false victories when there is still work to be done
- write full jsdoc atop every function you touch. if jsdoc exists, just check it is correct and update it if necessary. dont use comments inside the function unless it seems really necessary to grok whats going on. you can leave "section divider" comments in the code.
- when possible, favor using lodash over native js methods. lodash is already in the codebase and is a known dependency. it is part of our styleguide to use it
- if you need to use an apostrophe, use the ’ character
- keep your explanations short and to the point. include only details that are needed. 
- you are in agent mode. dont tell me to do things that you can do yourself, or run simple terminal commands to do. 
- dont leave me with lint errors. if you are unable to use your edit tools correctly within 5 tries, revert the problematic file to its last known working state.

